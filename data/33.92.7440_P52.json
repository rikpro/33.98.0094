{"Partnumber": "33.92.7440", "TestCaseList": "[{'name': 'FT', 'description': 'Functional Test'}, {'name': 'WI', 'description': 'Withstand-Insulation test'}]", "Description": "HW LRU Civity UK IP Passenger Intercom", "TestCases": {"FT": [{"Function": "__init__", "Step": 1, "ExpectedResults": " ", "Description": "Initialization FT Test Setup\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n   *** Unnamed function arguments in database ***\n$ARTNR, $HWVERSION, IP='80.0.0.20'\n\n    Setup Test Sequence\n    \n    arguments:\n        HWpartcode, HWVersion, IPaddress\n    \n    Return:\n        Returns the instance of the class", "Title": "Initialization FT Test Setup", "ExpectedFuncResult": " ", "TestType": "FT", "Arguments": "   *** Unnamed function arguments in database ***\n$ARTNR, $HWVERSION, IP='80.0.0.20'"}, {"Function": "programLRU", "Step": 2, "ExpectedResults": "True", "Description": "Program LRU\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n\"\\\\\\\\fileserver\\\\fileserver\\\\R&D\\\\Ontwikkelingen\\\\33.96.8048\\\\F.studie\\\\4.Software\\\\RLS_33968048_1-02\\\\update-33968048.tar.gz\"\n\n    program LRU with latest File System.\n    For old HW board: only a verify of the programmed version can be done.\n    For new HW board: update with latest File System and verify the version.\n    Return True when valid.", "Title": "Program LRU", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "\"\\\\\\\\fileserver\\\\fileserver\\\\R&D\\\\Ontwikkelingen\\\\33.96.8048\\\\F.studie\\\\4.Software\\\\RLS_33968048_1-02\\\\update-33968048.tar.gz\""}, {"Function": "logVersion", "Step": 3, "ExpectedResults": "True", "Description": "Log Programmed Version\n\nArgument(s):\n   None\n\n    Captures the output of version script or version file on the UUT.\n    \n    Args:\n        type (str):\n            'all' = Captures the output of the version.sh script.\n                    (=versions of Bootloader, Linux kernel, Filesystem and Application.)\n            'config' = log data returned from config version file\n            'jingles' = log data returned from jingles version file\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Log Programmed Version", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": ""}, {"Function": "logEEPROM", "Step": 4, "ExpectedResults": "True", "Description": "Log EEPROM Data\n\nArgument(s):\n   None\n\n    Captures the output of the eepromn.sh script run on the UUT.\n    This will capture the EEPROM configuration of MAC address, Serial number, Board ID, Device ID, Config ID.\n    \n    Args:\n        None\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Log EEPROM Data", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": ""}, {"Function": "testIO", "Step": 5, "ExpectedResults": "True", "Description": "Test Input 1 with Output 1\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n1,1\n\n    Testing the IO's. Test input by setting output.\n    Both set and reset states are checked.\n    \n    Args:\n        in_number (int): Identifying the input used in the test.\n        out_number (int): Identifying the output used in the test.\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test Input 1 with Output 1", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "1,1"}, {"Function": "testIO", "Step": 6, "ExpectedResults": "True", "Description": "Test Input 2 with Output 1\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n2,1\n\n    Testing the IO's. Test input by setting output.\n    Both set and reset states are checked.\n    \n    Args:\n        in_number (int): Identifying the input used in the test.\n        out_number (int): Identifying the output used in the test.\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test Input 2 with Output 1", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "2,1"}, {"Function": "testLeds", "Step": 7, "ExpectedResults": "True", "Description": "Test Leds\n\nArgument(s):\n   None\n\n    Visually verify that the LEDs are working on the UUT.\n    All colors are verified.\n    \n    Args:\n        None\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test Leds", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": ""}, {"Function": "testAudio", "Step": 8, "ExpectedResults": "*** Old format used in database ***\n(-25,-17);(0,0)", "Description": "Test Panel LS and MIC\n\nArgument(s):\n   None\n\n    Test UUT speaker and microphone in acoustic loopback.\n    A white noise audiofile is copied to the UUT, played on the speaker output and\n    recorded via the microphone on the UUT.\n    The level of the recorded file is analysed with the Audio Precision Analyser (Apx515).\n    \n    Args:\n        None\n    \n    Returns:\n        tuple: level of recording(dBmV)", "Title": "Test Panel LS and MIC", "ExpectedFuncResult": "(-25,-17);(0,0)", "TestType": "FT", "Arguments": ""}, {"Function": "testChassis", "Step": 9, "ExpectedResults": "True", "Description": "Test Chassis Connection\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n1\n\n    Test Chassis connections on the UUT.\n    \n    Args:\n        number (int): Sequential number for the chassis connection on the UUT.\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test Chassis Connection", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "1"}, {"Function": "testIp", "Step": 10, "ExpectedResults": "True", "Description": "Test IP Connection X2\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n2, device_IPaddr= \"61.1.114.35\", adapter_IPaddr = \"61.1.114.30\", adapter_IPmask = \"255.0.0.0\"\n\n    Test IP connection on the UUT.\n    Verify if ETH LED is blinking when IP activity.\n    \n    Args:\n        number (int): Identification number for the IP connection on the UUT.\n            number = 2, test IP connection on connector X2\n            number = 3, test IP connection on connector X3\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test IP Connection X2", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "2, device_IPaddr= \"61.1.114.35\", adapter_IPaddr = \"61.1.114.30\", adapter_IPmask = \"255.0.0.0\""}, {"Function": "testIp", "Step": 11, "ExpectedResults": "True", "Description": "Test IP Connection X3\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n3, device_IPaddr= \"61.1.114.35\", adapter_IPaddr = \"61.1.114.30\", adapter_IPmask = \"255.0.0.0\"\n\n    Test IP connection on the UUT.\n    Verify if ETH LED is blinking when IP activity.\n    \n    Args:\n        number (int): Identification number for the IP connection on the UUT.\n            number = 2, test IP connection on connector X2\n            number = 3, test IP connection on connector X3\n    \n    Returns:\n        bool: True if successful, False otherwise.", "Title": "Test IP Connection X3", "ExpectedFuncResult": "True", "TestType": "FT", "Arguments": "3, device_IPaddr= \"61.1.114.35\", adapter_IPaddr = \"61.1.114.30\", adapter_IPmask = \"255.0.0.0\""}], "WI": [{"Function": "__init__", "Step": 1, "ExpectedResults": " ", "Description": "Initialization WI Test Setup\n\nArgument(s):\n   *** Unnamed function arguments in database ***\n   *** Unnamed function arguments in database ***\n$ARTNR, $HWVERSION,$SNR,$MANR, $QTY\n\n    Setup of WI Test Sequence.\n        - Informs the user that Work Instruction is available.\n        - Informs the user on how many and what devices (partcode, serial number) will be tested.\n        - Display connection block diagram and warning message.\n        - Informs the user to look in E01 for dedicated WI testtool cable.\n        - Informs the user of connecting an AC AMP-meter (if HV tester does not indicate AC current).\n    \n    Args:\n        HWpartcode (str):partcode of the scanned devices.\n        HWversion (str): version of the scanned devices.\n        snr (list): list of serial numbers of scanned devices to be tested.\n        maNr (list): list of MA numbers of scanned devices to be tested.\n        qty (int): quantity of scanned devices to be tested.\n        setup_picture (str): full path and filename of the WI test setup picture", "Title": "Initialization WI Test Setup", "ExpectedFuncResult": " ", "TestType": "WI", "Arguments": "   *** Unnamed function arguments in database ***\n$ARTNR, $HWVERSION,$SNR,$MANR, $QTY"}, {"Function": "startWI", "Step": 2, "ExpectedResults": "True", "Description": "Insulation Test: Group 1 <> Group 2, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 1 <> Group 2, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}, {"Function": "startWI", "Step": 3, "ExpectedResults": "True", "Description": "Withstand Test: Group 1 <> Group 2, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',1.58,20)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Withstand Test: Group 1 <> Group 2, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',1.58,20)"}, {"Function": "startWI", "Step": 4, "ExpectedResults": "True", "Description": "Insulation Test: Group 1 <> Group 2, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 1 <> Group 2, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group1':'chassis'},groups_destination={ 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}, {"Function": "startWI", "Step": 5, "ExpectedResults": "True", "Description": "Insulation Test: Group 2 <> Group 1, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 2 <> Group 1, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}, {"Function": "startWI", "Step": 6, "ExpectedResults": "True", "Description": "Withstand Test: Group 2 <> Group 1, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"withstand\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',0.04,20)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Withstand Test: Group 2 <> Group 1, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"withstand\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',0.04,20)"}, {"Function": "startWI", "Step": 7, "ExpectedResults": "True", "Description": "Insulation Test: Group 2 <> Group 1, Group 3, Group 4\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 2 <> Group 1, Group 3, Group 4", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group2':'galvanic inputs'},groups_destination={ 'group1':'chassis', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}, {"Function": "startWI", "Step": 8, "ExpectedResults": "True", "Description": "Insulation Test: Group 4 <> Group 1, Group 2, Group 3\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group4':'PoE'},groups_destination={ 'group1':'chassis','group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 4 <> Group 1, Group 2, Group 3", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group4':'PoE'},groups_destination={ 'group1':'chassis','group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}, {"Function": "startWI", "Step": 9, "ExpectedResults": "True", "Description": "Withstand Test: Group 4 <> Group 1, Group 2, Group 3\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"withstand\",groups_source={'group4':'PoE'},groups_destination={'group1':'chassis', 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',3.73,20)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Withstand Test: Group 4 <> Group 1, Group 2, Group 3", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"withstand\",groups_source={'group4':'PoE'},groups_destination={'group1':'chassis', 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'},voltage=500, duration=60, limits=('tol',3.73,20)"}, {"Function": "startWI", "Step": 10, "ExpectedResults": "True", "Description": "Insulation Test: Group 4 <> Group 1, Group 2, Group 3\n\nArgument(s):\n   *** Unnamed function arguments in database ***\ntesttype=\"insulation\",groups_source={'group4':'PoE'},groups_destination={'group1':'chassis', 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)\n\n    Start a specific WI test.\n    \n    e.g.: wi_test(testtype=\"insulation\", groups_source={'group1':'bat'}, groups_destination={'group2':'signal'},\n                    voltage=1000,duration=30, limits=('win',1e6,1e9))\n                  testtype=\"withstand\",groups_source={'group1':'chassis'},groups_destination={'group2':'galvanic inputs', 'group3':'signal'},\n                    voltage=500, duration=60, limits=('tol',56,20)\n    \n    Args:\n        testtype (str): Identifying the test type.\n            e.g. 'insulation' for Insulation test, 'withstand' for Withstand test.\n        groups_source (dict): Dictonary List of source groups.\n        groups_destination (dict): Dictonary List of destination groups.\n        voltage (int): test voltage [V]\n        duration (int): test duration [sec]\n        limits (tuple):\n                1st element: specifies the type\n                e.g. 'win': window limits\n                    then 2nd element = lower limit and upper 3th element = upper limit\n                e.g. 'tol': tolerance limits\n                    then 2nd element = base value and 3th element = tolerance[%]\n                4th element: specifies the frequency used to determine the limits with (Hz)\n    \n    Returns:\n        float: measured value.", "Title": "Insulation Test: Group 4 <> Group 1, Group 2, Group 3", "ExpectedFuncResult": "True", "TestType": "WI", "Arguments": "testtype=\"insulation\",groups_source={'group4':'PoE'},groups_destination={'group1':'chassis', 'group2':'galvanic inputs', 'group3':'signals', 'group4':'PoE'}, voltage=500, duration=10, limits=('win',1000,2000)"}]}}